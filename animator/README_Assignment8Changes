
## Changed for customers
Files that were added:
IAnimationSummary
IPosition
IRGBColor
IUtil

Files that were changed:
IShape --> makeCopy method added
SVGView --> remove useless casting of Concrete shape
Many files --> change all instances of Color to IColor etc.
IUtil --> change duplicateMap method to not use the ShapeFactory


We had to make a couple changes for our customers, to better allow them to work with
our code. Initially, we used concrete classes to represent positions, colors,
and animation summaries. After receiving code from our providers and realizing
how many issues we had with their code, we quickly realized our own code needed to be
refactored to use interfaces.

This included moving functionality out of concrete classes and putting it into interfaces.
Most notably, this occured by moving the getters out of the concrete animation
implementations, and into the interfaces, thereby, reducing the need to cast animations
to a specific implementation to access the getters. The trade off for to this is now
OperationNotSupported errors must be thrown whenever a getter is used for an inappropriate
attribute of a particular animation.

Furthermore, there were a number of instances, where our code was being assigned to an interface,
but a coupling was created at creation time (i.e. `new ConcreteImplementation()`). We resolved these
instances by adding factory methods to the most appropriate classes to create them. For example,
a couple between IAnimationSummary and AnimatonSummary was removed by adding a factory method to
IAnimation, thereby guarenteeing IAnimations will produce their corresponding summaries.