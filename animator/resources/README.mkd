# Assignment 8

## What works
We were able to get our providers code working to the same degree of
completion that they were able to achieve, i.e., whatever they got
working, we have working. All 4 provider views can be launched from the
command line with the following tags.
- text view: -iv providertext
- svg view: -iv providersvg
- visual view: -iv providervisual
- interactive: -iv provider

Unless otherwise noted, all functionality of each of the views works.

**Text View**
- all working

**SVG View**
- does not handle shape order properly, and as a result, producing/exporting
the svg view of the buildings does not render properly. (not working for
providers)
- does not handle looping, if produced from the interactive view. (not
working for providers)

**Visual View**
- windows are drawn off main canvas, but can be scrolled to and seen
before they appear. (not working for providers)

**Interactive View**
- windows are drawn off main canvas, but can be scrolled to and seen
before they appear. (not working for providers)


## Changed for customers
We had to make a couple changes for our customers, to better allow them
to work with our code. Initially, we used concrete classes to represent
positions, colors, and animation summaries. After receiving code from
our providers and realizing how many issues we had with their code, we
quickly realized our own code needed to be refactored to use interfaces.

This included moving functionality out of concrete classes and putting
it into intefaces. Most notably, this occured by moving the getters out
of the concrete animation implementations, and into the interfaces,
thereby, reducing the need to cast animations to a specific
implementation to access the getters. The trade off for to this is now
OperationNotSupported errors must be thrown whenever a getter is used
for an inappropriate attribute of a particular animation.

Furthermore, there were a number of instances, where our code was being
assigned to an interface, but a coupling was created at creation time
(i.e. `new ConcreteImplementation()`). We resolved these instances by
adding factory methods to the most appropriate classes to create them.
For example, a couple between IAnimationSummary and AnimatonSummary was
removed by adding a factory method to IAnimation, thereby guarenteeing
IAnimations will produce their corresponding summaries.

The following classes needed to be modified:
- IAnimation (and concrete animation classes)
- AbstractAnimation
- IRGBColor
- MyUtil -> IMyUtil
- SVGView
- TextView
- Interactive View

# Assignment 7 Updates
In Assignment 7, we developed a new view called the interactive view. This view
took advantage of our previously developed canvas pane and svg views in order to
resuse the maximum amount of code. The interactive view (implmenting a new interface)
makes an additional control panel who is responsible for creating all the button
buttons and interface objects. The control panel creates button panels, sliders, 
check boxes and even text fields that are used to interact with the user. The
controller creates and utilizes two listeners, an action listener responsible 
for handlin any button clicks, and a change listener responsible for adjusting
the speed of the animation. The interactive interface exposes a number of panels
useful to the manipulation of the animation. 

We handled showing and hiding shapes using a JSwing check box. We create an 
"enabled" map parallel to the shapes in our model to determine whether a shape
is visible on the screen. In our canvas pane, we check whether or not a shape from
our view model is visible before deciding to draw it. We represent this feature
in our export function by creating an new view model that only contains the enabled
shapes at export time. This allows us to simply pass the newly constructed 
view model to the SVG view held inside the interactive view and producing the 
desired exported file. By using composition with our SVG view, implementing the
SVG export functionality becomes a trivial problem. 

## Modificaitons and Updates
In assignment 7, we made some modificaitons to our previously written code to 
allow our SVG view to handle for looping. We also added a static counter to keep 
track of the number of abstract shapes made in order to correctly layer our 
shapes within the animation. AbstractAnimatedShapes now implement the comparable
interface which allows them to be sorted by creation index, much like the way
we can sort Animation summaries. We also added some utilities to facilite creating
copies of data objects since we realized certain objects (like maps and lists) 
passed around references to objects when being copied. We therefore had to implement
several methods to facilite deep copying to avoid this problem.

We also updated our previous canvas view to allow for smoother animations by increasing the number
of times we draw the animation state per second. Where before we were drawing at 1 frame per second,
we now draw at 20 frames per second. We further filled in the shapes in our visual animaitons
(instead of shape outlines).

No other significant changes were made. 


# Assignment 6 Model Updates
There were two primary changes made to our model in this assignment. The first change involved
adding the requested TweenModelBuilder interface and implementation to our class to allow it to
integrate well with the AnimationFileReader. By implementing the requested interface, we had an
easy time integrating the animation file reader into our model.

The second major change involved creating a ModelView interface that allowed the view to have access
to a read only version of the model. As part of implementing this new interface, we exposed a
new method, `getFullState()` which returns the map of AnimatedShapes to the caller. This allows the
model to directly access the state of the model and draw the contained shapes at any time.

## Further Development
We created an IView interface that represents all views of the animator. In this interface, there
exists a show method that takes in the tempo of the animation at this time and performs view
implementation dependent on type of view. As of right now, each class that implements the IView
interface represents a specific type of view (visual, svg, text). The text and svg classes take in
an appendable filewriterr to which the properly formatted output will be added to. The visual view
prints the output as a graphical display in a pop up window. This window additionally has scrollable
 capability.

We made a ViewFactory class that is used to determine which view to construct. There is a method in
this that creates an appendable and an instance of the proper view class based on string input. It
throws an illegal arg exception if the string is invalid. 


The controller itself has 3 elements. The first is an IController interface that has a void
playAnimation method that will be called in the EasyAnimator class main method. The second part is
the IControllerBuilder which is a builder interface that contains methods that will construct a
builder with the following default values. - speed: 1 - o: System.out The input file and the view
type MUST be set before construction. The Builder class is created in the AnimatorController class
that implements from the IController interface. This builds from the args in the main method.

# Assignment 5

# Animator Model
# Andrew Tu
# Feb 23, 2018

## Design Overview
I developed my implementation in a top down approach, starting with the most general interfaces, and
working my way down as necessary. From the demo description, certain necessary functions and features
could be established.

```
Create red rectangle R with corner at (200,200), width 50 and height 100
Create blue oval C with center at (500,100), radius 60 and 30

R appears at time t=1 and disappears at time t=100
C appears at time t=6 and disappears at time t=100

R moves from (200,200) to (300,300) from time t=10 to t=50
C moves from (500,100) to (500,400) from time t=20 to t=70
C changes from blue to green from time t=50 to t=80
R moves from (300,300) to (200,200) from time t=70 to t=100
R changes width from 50 to 25 from time t=51 to t=70
```

The first two lines indicated the need of for someway to create a shape with 4 pieces of information.
1. Shape name
2. Shape position
3. Shape dimensions
4. Shape color

This led me to create a shape class that represented the data needed to create a shape. This also meant
we needed a function to add a shape to our animator.model, hence the creation of the `addShape` method.

Given that a user can add a shape to the animator.model, it also seemed natural to give the user the ability
to remove the shape from the animator.model. Thus, I also added a `deleteShape` method to the animator.model interface.

The remaining lines of the description yielded a number of important characteristics, there existed
a number of defined animations that had some effect on a particular shape. Furthermore, animations
acted upon a single shape and there could only be a single animation of particular type acting on a
shape at any point in time. Most importantly, animations are functions of time: the representation
of a given shape is dependent on the animations applied to the shape at a particular point in time.

From these lines, I added the `addAnimation` method that applies an a given animation to a particular
shape name.

The `toString` methods return the textual representation of the animator where an optional
time parameter can be given to see the state of the animator as a function of time.

Since the animator.model will be used to supply information to the view, I also wanted to provide an easy to
use, machine readable version of the state. Therefore, I included a `getState(float time)` method that
returned a List of shapes representing every state in the animator.model at a given time.

Finally, as a convenience function to the user, I exposed a `listShapes()` method which simply returned
a list of the shapes (names) in the animator.model. This

## IAnimatedShape
While implementing the `addAnimation` function for the animator.model, it became apparent that there needed to be a
distinction between a shape's representation at a discrete point in time, and the shapes representation as a
function of time. Thus, I created an IAnimatedShape class which represents the shape as a function of time.
This interface exposes the ability to add animations to a particular shape and then get the state of the shape
back as at a particular time. We also wanted to see all animations that would occur over the course of the run
time for the shape so I implemented a `getSummary()` function that was responsible for returning a list of
animation summaries (an animation summary being a tuple of time and descriptions that implements the comparable
class allowing summaries to be sorted by start time).

## IShape
Where `IAnimatedShape` represented the state over time, IShape represents the shape at a discrete point in
time. The shape interface requires certain functions for accessing color, dimensions, and position.
One of the tricky aspects of shapes is that reference points and dimension are unique to the type of shape
- therefore enums/interfaces were established to represent each respectively.

## Rectangle
The rectangle represents a concrete implementation of a shape. In the interest of time, I only
implemented a rectangle, however, due to the abstract shape representations, implementation additonal
shapes is easily done.

## Abstract Classes and Factories
Where applicable, abstract classes were implemented to abstract common functions out of concrete classes.
Where applicable, factories were created to avoid locking classes into concrete implementations.


## Other Notes:
This code needs some refactoring which I was not able to do in time for submission. A number
of tests are also failing with a "NotImplementedException" due to the nature of not having been
implemented. I posted twice in the Piazza regarding how to handle tests that have written but are not
(and cannot) be passed or fully written since we do not know how they are supposed to behave.
