Notes:
How flexible are the interfaces you were given?
How capable are the views?
How convenient was it to reuse their code?
How cleanly written and well-documented was their code?
If you needed to request changes from them, what were they and why were they needed?

Design Critique:
Initially, our provider's code did not include many interfaces for their data classes like shape or
animation. They solely relied on Abstract classes to reference these objects in the view classes,
The interfaces of the views we were initially given were moderately flexible but relied heavily on
the use of these abstract and concrete classes instead of interfaces. This made it somewhat
difficult to implement adapters for their model components.

Further, from the given code and documentation, it is really difficult to
distinguish how the components were intended to be used. Two of the major
components of their design were an AbstractShape, inherited by the concrete
implementations of the shapes, as well as animations which held Abstract shape
methods through composition. This provides the user with a number of different
knobs that could be turned to manipulate the shapes which is really confusing to understand where
objects need to be synchronized. After discussing with the other group, we understood that the Shape
in an animation references an instance of the AbstractShape class and mutates its components per
animation. To further complicate matters, both animations and shapes are derived from an
AbstractCanvasObject` and both shapes and animations have start and end times. It seems that the
animations and shapes were very closesly coupled, and without more knowledge of the intended use and
 implementation, modifying our model to fit theirs was somewhat difficult.

It was a little strange to have SVGView extend the TextualView because they have very
distinctly formatted outputs. It also doesn't seem like svg uses any of the method functionality of
text, so the only reason for the coupling seems to be to use the textual constructor and not having
to instantiate another appendable.

What we did like about their design was that they managed to reuse the shape panel
between designs for the Hybrid and Visual View. This meant that once we were
able to get the visual component working for the visual view, we knew how to
implement the same features on the hybrid view.

Implementation Critique:

Futher, looking through the views showed that at least parts of the flow of the
program were controlled by regexes and string matching especially in TextualView. This is somewhat
confusing to the user since we must implement the methods to return the string exactly as
expected, otherwise parts of the code may fail. There was no documentation on the
expected output of the strings.

The methods animate and writeAnimatorDescription in the IView interface ultimately have the same
purpose. However, in SVGView and TextualView, writeAnimatorDescription is used to append to an
appendable, and in Visual and Hybrid View, animate is used to start the timer and launch the view.
The animate method is left without use in the Svg and Txt while the writeAnimatorDescription is left
 unused in Visual and Hybrid. It seems redundant and wasteful.


Documentation Critique:

There was very little helpful documentation for their views as they didn't provide a readme to
explain how far along each of their views worked. There also was no documentation of how expected
output was meant to look until we explicity asked them.


Design/Code Limitations:
 In terms of the capabilities of the views, they had almost everything implemented except looping in
  svg view, overlaying shapes properly based on when they were created, and proper reset on export.



We needed to request several items from our providers including the following
- AbstractAnimation Interface
- AbstractShape Interface
- Color Interface
- Posn Interface
- Move Interface
- Controller Interfaces
- AbstractCanvasObject interface
-
We also requested a number of clarifications with regards to documentation
including the following.
- What are the coefficients referred to in the abstract animation?
- Examples for the strings that needed to be returned to the user from various
String return type methods.
- How is looping

